name: Delete eks-terraform cluster

on:
  workflow_dispatch:
    inputs:
      name:
        type: string
        default: ""
        description: Name of the cluster

jobs:
  reprepare:
    runs-on: ubuntu-latest
    permissions: 
      id-token: write
      contents: read
    env:
      STATE_BUCKET: "grapes-state"
      STATE_BUCKET_REGION: "eu-west-1"
    steps:
    - uses: actions/checkout@v4
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::296119450228:role/grapes
        role-session-name: grapes
        region: ${{ env.STATE_BUCKET_REGION }}
    - name: Rotate credentials for cluster user
      run: |
        aws iam create-access-key --user-name ${{ github.event.inputs.name }} --output=json > output.json
        echo 'cluster_access_key=$(cat output.json | jq '.AccessKey.AccessKeyId' |tr -d "\"")' >> $GITHUB_ENV
        echo 'cluster_secret_key=$(cat output.json | jq '.AccessKey.SecretAccessKey' |tr -d "\"")' >> $GITHUB_ENV
   
  destroy: 
    needs: reprepare
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: "${{ env.cluster_access_key }}"
      AWS_SECRET_ACCESS_KEY: "${{ env.cluster_secret_key }}"
      AWS_REGION: "${{ github.event.inputs.region }}"
    steps:
    - name: Grab Terraform files from bucket
      run: aws mv s3://${{ env.STATE_BUCKET }}/${{ github.event.inputs.name }} eks-terraform
    - name: Setup terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.5
        terraform_wrapper: false
    - name: Terraform Init
      id: init
      run: terraform -chdir=eks-terraform init -backend-config=s3.tfbackend
    - name: Terraform Destroy
      env:
        AWS_ACCESS_KEY_ID: "${{ env.cluster_access_key }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.cluster_secret_key }}"
        AWS_REGION: "${{ github.event.inputs.region }}"
      run: terraform -chdir=eks-terraform destroy -auto-approve -input=false -var-file vars.tfvars
    - name: Delete state
      if: always()
      run: aws rm s3://${{ env.STATE_BUCKET }}/${{ github.event.inputs.name }}
  cleanup:
    needs: destroy
    runs-on: ubuntu-latest
    permissions: 
      id-token: write
      contents: read
    steps:
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::296119450228:role/grapes
        role-session-name: grapes
        region: ${{ env.STATE_BUCKET_REGION }}
    - name: Delete cluster user
      if: always()
      run: aws iam delete-user --user-name ${{ github.event.inputs.name }}