name: Delete eks-terraform cluster

on:
  workflow_dispatch:
    inputs:
      name:
        type: string
        default: ""
        description: Name of the cluster

env:
  STATE_BUCKET: "grapes-state"
  AWS_REGION: "eu-west-1" # only bucket, terraform can run elsewhere

jobs:
  repreapre:
    needs: destroy
    runs-on: ubuntu-latest
    permissions: 
      id-token: write
      contents: read
    steps:
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::296119450228:role/grapes
        role-session-name: grapes
        aws-region: ${{ env.AWS_REGION }} 
    - name: Grab Terraform files from bucket
      run: aws s3 sync s3://${{ env.STATE_BUCKET }}/${{ github.event.inputs.name }} eks-terraform
    - name: Save Terraform configuration to next job
      uses: actions/upload-artifact@v3
      with:
        name: state-${{ github.event.inputs.name }}
        path: eks-terraform   
  destroy: 
    runs-on: ubuntu-latest
    needs: reprepare
    steps:
    - name: Grab Terraform configuration from previous job
      uses: actions/download-artifact@v3
      with:
        name: state-${{ github.event.inputs.name }}
        path: eks-terraform
    - name: Configure aws env vars
      run: |
        cluster_access_key=$(cat eks-terraform/creds.json | jq '.AccessKey.AccessKeyId' |tr -d "\"")
        cluster_secret_key=$(cat eks-terraform/creds.json | jq '.AccessKey.SecretAccessKey' |tr -d "\"")
        echo "AWS_ACCESS_KEY_ID=$cluster_access_key" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$cluster_secret_key" >> $GITHUB_ENV
    - name: Setup terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.5
        terraform_wrapper: false
    - name: Terraform Init
      id: init
      run: terraform -chdir=eks-terraform init -backend-config=s3.tfbackend
    - name: Terraform Destroy
      run: terraform -chdir=eks-terraform destroy -auto-approve -input=false -var-file vars.tfvars
  cleanup:
    needs: destroy
    runs-on: ubuntu-latest
    permissions: 
      id-token: write
      contents: read
    steps:
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::296119450228:role/grapes
        role-session-name: grapes
        aws-region: ${{ env.AWS_REGION }} 
    - name: Delete cluster user
      if: always()
      run: aws iam delete-user --user-name ${{ github.event.inputs.name }}
    - name: Delete state + config
      if: always()
      run: | 
        aws s3 rm s3://${{ env.STATE_BUCKET }}/${{ github.event.inputs.name }} --recursive
        aws s3 rm s3://${{ env.STATE_BUCKET }}/${{ github.event.inputs.name }}-state