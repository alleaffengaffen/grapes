argo-cd:
  global:
    networkPolicy:
      create: true

  configs:
    params:
      server.insecure: true
    cm:
      url: "https://cd.technat.dev"
      server.rbac.log.enforce.enable: "true"
      exec.enabled: "true"
      admin.enabled: "true"
      dex.config: |
        connectors:
          - type: github
            id: github
            name: GitHub
            config:
              clientID: 26be52c1bdb04a4d6e1f
              clientSecret: $github-oidc:clientSecret 
              orgs:
              - name: alleaffengaffen
    rbac:
      policy.csv: |
        # Grant all members of 'alleaffengaffen:orangutans' admins
        g, alleaffengaffen:orangutans, role:admin
      policy.default: role:readonly

  server:
    ingress:
      enabled: true
      annotations:
        ingress.kubernetes.io/force-ssl-redirect: "true"
				tailscale.com/expose: "true"
				tailscale.com/funnel: "true"
				tailscale.com/host: "argo"
      ingressClassName: "tailscale"
      hosts:
        - cd.technat.dev
      tls:
        - secretName: argocd-secret
          hosts:
            - argo
    priorityClassName: "system-cluster-critical"
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    metrics:
      enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 64Mi

  controller:
    enableStatefulSet: true
    priorityClassName: "system-cluster-critical"
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    metrics:
      enabled: true
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 50m
        memory: 128Mi

  notifications:
    priorityClassName: "system-cluster-critical"
    containerSecurityContext:
      runAsNonRoot: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
    metrics:
      enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 64Mi

  redis:
    priorityClassName: "system-cluster-critical"
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    metrics:
      enabled: true
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 5m
          memory: 16Mi
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 64Mi

  repoServer:
    priorityClassName: "system-cluster-critical"
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    metrics:
      enabled: true
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 50m
        memory: 64Mi

  applicationSet:
    priorityClassName: "system-cluster-critical"
    containerSecurityContext:
      runAsNonRoot: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
    metrics:
      enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 64Mi

